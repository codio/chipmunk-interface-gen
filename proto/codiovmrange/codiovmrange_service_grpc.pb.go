// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.4
// source: proto/codiovmrange/codiovmrange_service.proto

package codiovmrange

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CodioVmRange_CreateVm_FullMethodName  = "/com.codio.chipmunk.proto.codiovmrange.CodioVmRange/CreateVm"
	CodioVmRange_StartVm_FullMethodName   = "/com.codio.chipmunk.proto.codiovmrange.CodioVmRange/StartVm"
	CodioVmRange_StopVm_FullMethodName    = "/com.codio.chipmunk.proto.codiovmrange.CodioVmRange/StopVm"
	CodioVmRange_DestroyVm_FullMethodName = "/com.codio.chipmunk.proto.codiovmrange.CodioVmRange/DestroyVm"
	CodioVmRange_SetParams_FullMethodName = "/com.codio.chipmunk.proto.codiovmrange.CodioVmRange/SetParams"
	CodioVmRange_ListVms_FullMethodName   = "/com.codio.chipmunk.proto.codiovmrange.CodioVmRange/ListVms"
)

// CodioVmRangeClient is the client API for CodioVmRange service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodioVmRangeClient interface {
	CreateVm(ctx context.Context, in *CreateVmRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CreateVmResponse], error)
	StartVm(ctx context.Context, in *StartVmRequest, opts ...grpc.CallOption) (*StartVmResponse, error)
	StopVm(ctx context.Context, in *StopVmRequest, opts ...grpc.CallOption) (*StopVmResponse, error)
	DestroyVm(ctx context.Context, in *DestroyVmRequest, opts ...grpc.CallOption) (*DestroyVmResponse, error)
	SetParams(ctx context.Context, in *SetParamsRequest, opts ...grpc.CallOption) (*SetParamsResponse, error)
	ListVms(ctx context.Context, in *ListVmsRequest, opts ...grpc.CallOption) (*ListVmsResponse, error)
}

type codioVmRangeClient struct {
	cc grpc.ClientConnInterface
}

func NewCodioVmRangeClient(cc grpc.ClientConnInterface) CodioVmRangeClient {
	return &codioVmRangeClient{cc}
}

func (c *codioVmRangeClient) CreateVm(ctx context.Context, in *CreateVmRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CreateVmResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CodioVmRange_ServiceDesc.Streams[0], CodioVmRange_CreateVm_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateVmRequest, CreateVmResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CodioVmRange_CreateVmClient = grpc.ServerStreamingClient[CreateVmResponse]

func (c *codioVmRangeClient) StartVm(ctx context.Context, in *StartVmRequest, opts ...grpc.CallOption) (*StartVmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartVmResponse)
	err := c.cc.Invoke(ctx, CodioVmRange_StartVm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codioVmRangeClient) StopVm(ctx context.Context, in *StopVmRequest, opts ...grpc.CallOption) (*StopVmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopVmResponse)
	err := c.cc.Invoke(ctx, CodioVmRange_StopVm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codioVmRangeClient) DestroyVm(ctx context.Context, in *DestroyVmRequest, opts ...grpc.CallOption) (*DestroyVmResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DestroyVmResponse)
	err := c.cc.Invoke(ctx, CodioVmRange_DestroyVm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codioVmRangeClient) SetParams(ctx context.Context, in *SetParamsRequest, opts ...grpc.CallOption) (*SetParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetParamsResponse)
	err := c.cc.Invoke(ctx, CodioVmRange_SetParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codioVmRangeClient) ListVms(ctx context.Context, in *ListVmsRequest, opts ...grpc.CallOption) (*ListVmsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVmsResponse)
	err := c.cc.Invoke(ctx, CodioVmRange_ListVms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodioVmRangeServer is the server API for CodioVmRange service.
// All implementations must embed UnimplementedCodioVmRangeServer
// for forward compatibility.
type CodioVmRangeServer interface {
	CreateVm(*CreateVmRequest, grpc.ServerStreamingServer[CreateVmResponse]) error
	StartVm(context.Context, *StartVmRequest) (*StartVmResponse, error)
	StopVm(context.Context, *StopVmRequest) (*StopVmResponse, error)
	DestroyVm(context.Context, *DestroyVmRequest) (*DestroyVmResponse, error)
	SetParams(context.Context, *SetParamsRequest) (*SetParamsResponse, error)
	ListVms(context.Context, *ListVmsRequest) (*ListVmsResponse, error)
	mustEmbedUnimplementedCodioVmRangeServer()
}

// UnimplementedCodioVmRangeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCodioVmRangeServer struct{}

func (UnimplementedCodioVmRangeServer) CreateVm(*CreateVmRequest, grpc.ServerStreamingServer[CreateVmResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CreateVm not implemented")
}
func (UnimplementedCodioVmRangeServer) StartVm(context.Context, *StartVmRequest) (*StartVmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVm not implemented")
}
func (UnimplementedCodioVmRangeServer) StopVm(context.Context, *StopVmRequest) (*StopVmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVm not implemented")
}
func (UnimplementedCodioVmRangeServer) DestroyVm(context.Context, *DestroyVmRequest) (*DestroyVmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyVm not implemented")
}
func (UnimplementedCodioVmRangeServer) SetParams(context.Context, *SetParamsRequest) (*SetParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetParams not implemented")
}
func (UnimplementedCodioVmRangeServer) ListVms(context.Context, *ListVmsRequest) (*ListVmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVms not implemented")
}
func (UnimplementedCodioVmRangeServer) mustEmbedUnimplementedCodioVmRangeServer() {}
func (UnimplementedCodioVmRangeServer) testEmbeddedByValue()                      {}

// UnsafeCodioVmRangeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodioVmRangeServer will
// result in compilation errors.
type UnsafeCodioVmRangeServer interface {
	mustEmbedUnimplementedCodioVmRangeServer()
}

func RegisterCodioVmRangeServer(s grpc.ServiceRegistrar, srv CodioVmRangeServer) {
	// If the following call pancis, it indicates UnimplementedCodioVmRangeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CodioVmRange_ServiceDesc, srv)
}

func _CodioVmRange_CreateVm_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateVmRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CodioVmRangeServer).CreateVm(m, &grpc.GenericServerStream[CreateVmRequest, CreateVmResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CodioVmRange_CreateVmServer = grpc.ServerStreamingServer[CreateVmResponse]

func _CodioVmRange_StartVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodioVmRangeServer).StartVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodioVmRange_StartVm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodioVmRangeServer).StartVm(ctx, req.(*StartVmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodioVmRange_StopVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopVmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodioVmRangeServer).StopVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodioVmRange_StopVm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodioVmRangeServer).StopVm(ctx, req.(*StopVmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodioVmRange_DestroyVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyVmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodioVmRangeServer).DestroyVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodioVmRange_DestroyVm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodioVmRangeServer).DestroyVm(ctx, req.(*DestroyVmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodioVmRange_SetParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodioVmRangeServer).SetParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodioVmRange_SetParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodioVmRangeServer).SetParams(ctx, req.(*SetParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodioVmRange_ListVms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodioVmRangeServer).ListVms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodioVmRange_ListVms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodioVmRangeServer).ListVms(ctx, req.(*ListVmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CodioVmRange_ServiceDesc is the grpc.ServiceDesc for CodioVmRange service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CodioVmRange_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.codio.chipmunk.proto.codiovmrange.CodioVmRange",
	HandlerType: (*CodioVmRangeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartVm",
			Handler:    _CodioVmRange_StartVm_Handler,
		},
		{
			MethodName: "StopVm",
			Handler:    _CodioVmRange_StopVm_Handler,
		},
		{
			MethodName: "DestroyVm",
			Handler:    _CodioVmRange_DestroyVm_Handler,
		},
		{
			MethodName: "SetParams",
			Handler:    _CodioVmRange_SetParams_Handler,
		},
		{
			MethodName: "ListVms",
			Handler:    _CodioVmRange_ListVms_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateVm",
			Handler:       _CodioVmRange_CreateVm_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/codiovmrange/codiovmrange_service.proto",
}
