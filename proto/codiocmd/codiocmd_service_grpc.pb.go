// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: proto/codiocmd/codiocmd_service.proto

package codiocmd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CodioCmd_FileUpload_FullMethodName    = "/com.codio.chipmunk.proto.codiocmd.CodioCmd/FileUpload"
	CodioCmd_FileDownload_FullMethodName  = "/com.codio.chipmunk.proto.codiocmd.CodioCmd/FileDownload"
	CodioCmd_Exec_FullMethodName          = "/com.codio.chipmunk.proto.codiocmd.CodioCmd/Exec"
	CodioCmd_ExecAsync_FullMethodName     = "/com.codio.chipmunk.proto.codiocmd.CodioCmd/ExecAsync"
	CodioCmd_Ping_FullMethodName          = "/com.codio.chipmunk.proto.codiocmd.CodioCmd/Ping"
	CodioCmd_GetVMHostName_FullMethodName = "/com.codio.chipmunk.proto.codiocmd.CodioCmd/GetVMHostName"
)

// CodioCmdClient is the client API for CodioCmd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodioCmdClient interface {
	FileUpload(ctx context.Context, opts ...grpc.CallOption) (CodioCmd_FileUploadClient, error)
	FileDownload(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (CodioCmd_FileDownloadClient, error)
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
	ExecAsync(ctx context.Context, in *ExecAsyncRequest, opts ...grpc.CallOption) (*ExecAsyncResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	GetVMHostName(ctx context.Context, in *GetVMHostNameRequest, opts ...grpc.CallOption) (*GetVMHostNameResponse, error)
}

type codioCmdClient struct {
	cc grpc.ClientConnInterface
}

func NewCodioCmdClient(cc grpc.ClientConnInterface) CodioCmdClient {
	return &codioCmdClient{cc}
}

func (c *codioCmdClient) FileUpload(ctx context.Context, opts ...grpc.CallOption) (CodioCmd_FileUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &CodioCmd_ServiceDesc.Streams[0], CodioCmd_FileUpload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &codioCmdFileUploadClient{stream}
	return x, nil
}

type CodioCmd_FileUploadClient interface {
	Send(*FileUploadRequest) error
	CloseAndRecv() (*FileUploadResponse, error)
	grpc.ClientStream
}

type codioCmdFileUploadClient struct {
	grpc.ClientStream
}

func (x *codioCmdFileUploadClient) Send(m *FileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *codioCmdFileUploadClient) CloseAndRecv() (*FileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *codioCmdClient) FileDownload(ctx context.Context, in *FileDownloadRequest, opts ...grpc.CallOption) (CodioCmd_FileDownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &CodioCmd_ServiceDesc.Streams[1], CodioCmd_FileDownload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &codioCmdFileDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CodioCmd_FileDownloadClient interface {
	Recv() (*FileDownloadResponse, error)
	grpc.ClientStream
}

type codioCmdFileDownloadClient struct {
	grpc.ClientStream
}

func (x *codioCmdFileDownloadClient) Recv() (*FileDownloadResponse, error) {
	m := new(FileDownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *codioCmdClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := c.cc.Invoke(ctx, CodioCmd_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codioCmdClient) ExecAsync(ctx context.Context, in *ExecAsyncRequest, opts ...grpc.CallOption) (*ExecAsyncResponse, error) {
	out := new(ExecAsyncResponse)
	err := c.cc.Invoke(ctx, CodioCmd_ExecAsync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codioCmdClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, CodioCmd_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codioCmdClient) GetVMHostName(ctx context.Context, in *GetVMHostNameRequest, opts ...grpc.CallOption) (*GetVMHostNameResponse, error) {
	out := new(GetVMHostNameResponse)
	err := c.cc.Invoke(ctx, CodioCmd_GetVMHostName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodioCmdServer is the server API for CodioCmd service.
// All implementations must embed UnimplementedCodioCmdServer
// for forward compatibility
type CodioCmdServer interface {
	FileUpload(CodioCmd_FileUploadServer) error
	FileDownload(*FileDownloadRequest, CodioCmd_FileDownloadServer) error
	Exec(context.Context, *ExecRequest) (*ExecResponse, error)
	ExecAsync(context.Context, *ExecAsyncRequest) (*ExecAsyncResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	GetVMHostName(context.Context, *GetVMHostNameRequest) (*GetVMHostNameResponse, error)
	mustEmbedUnimplementedCodioCmdServer()
}

// UnimplementedCodioCmdServer must be embedded to have forward compatible implementations.
type UnimplementedCodioCmdServer struct {
}

func (UnimplementedCodioCmdServer) FileUpload(CodioCmd_FileUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method FileUpload not implemented")
}
func (UnimplementedCodioCmdServer) FileDownload(*FileDownloadRequest, CodioCmd_FileDownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method FileDownload not implemented")
}
func (UnimplementedCodioCmdServer) Exec(context.Context, *ExecRequest) (*ExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedCodioCmdServer) ExecAsync(context.Context, *ExecAsyncRequest) (*ExecAsyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecAsync not implemented")
}
func (UnimplementedCodioCmdServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedCodioCmdServer) GetVMHostName(context.Context, *GetVMHostNameRequest) (*GetVMHostNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVMHostName not implemented")
}
func (UnimplementedCodioCmdServer) mustEmbedUnimplementedCodioCmdServer() {}

// UnsafeCodioCmdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodioCmdServer will
// result in compilation errors.
type UnsafeCodioCmdServer interface {
	mustEmbedUnimplementedCodioCmdServer()
}

func RegisterCodioCmdServer(s grpc.ServiceRegistrar, srv CodioCmdServer) {
	s.RegisterService(&CodioCmd_ServiceDesc, srv)
}

func _CodioCmd_FileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CodioCmdServer).FileUpload(&codioCmdFileUploadServer{stream})
}

type CodioCmd_FileUploadServer interface {
	SendAndClose(*FileUploadResponse) error
	Recv() (*FileUploadRequest, error)
	grpc.ServerStream
}

type codioCmdFileUploadServer struct {
	grpc.ServerStream
}

func (x *codioCmdFileUploadServer) SendAndClose(m *FileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *codioCmdFileUploadServer) Recv() (*FileUploadRequest, error) {
	m := new(FileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CodioCmd_FileDownload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileDownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CodioCmdServer).FileDownload(m, &codioCmdFileDownloadServer{stream})
}

type CodioCmd_FileDownloadServer interface {
	Send(*FileDownloadResponse) error
	grpc.ServerStream
}

type codioCmdFileDownloadServer struct {
	grpc.ServerStream
}

func (x *codioCmdFileDownloadServer) Send(m *FileDownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CodioCmd_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodioCmdServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodioCmd_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodioCmdServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodioCmd_ExecAsync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecAsyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodioCmdServer).ExecAsync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodioCmd_ExecAsync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodioCmdServer).ExecAsync(ctx, req.(*ExecAsyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodioCmd_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodioCmdServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodioCmd_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodioCmdServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodioCmd_GetVMHostName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVMHostNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodioCmdServer).GetVMHostName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodioCmd_GetVMHostName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodioCmdServer).GetVMHostName(ctx, req.(*GetVMHostNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CodioCmd_ServiceDesc is the grpc.ServiceDesc for CodioCmd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CodioCmd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.codio.chipmunk.proto.codiocmd.CodioCmd",
	HandlerType: (*CodioCmdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _CodioCmd_Exec_Handler,
		},
		{
			MethodName: "ExecAsync",
			Handler:    _CodioCmd_ExecAsync_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _CodioCmd_Ping_Handler,
		},
		{
			MethodName: "GetVMHostName",
			Handler:    _CodioCmd_GetVMHostName_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FileUpload",
			Handler:       _CodioCmd_FileUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FileDownload",
			Handler:       _CodioCmd_FileDownload_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/codiocmd/codiocmd_service.proto",
}
